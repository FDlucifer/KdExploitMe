#pragma once

#include "HandleIOCTL.h"


NTSTATUS WriteWhatWhere(PDEVICE_OBJECT DeviceObject, PIRP Irp, PDATACOPY dataCopy)
{
	NTSTATUS ntStatus = STATUS_SUCCESS;

	UNREFERENCED_PARAMETER(DeviceObject);
	UNREFERENCED_PARAMETER(Irp);

	try
	{
		//Verify that the structure being read is in usermode
		ProbeForRead(dataCopy, sizeof(DATACOPY), sizeof(UCHAR));
	}
	except(EXCEPTION_EXECUTE_HANDLER)
	{

		ntStatus = GetExceptionCode();
		goto Cleanup;
	}


	if (dataCopy->DestLength < dataCopy->SourceLength)
	{
		ntStatus = STATUS_INVALID_BUFFER_SIZE;
		goto Cleanup;
	}

	//Vuln: Don't verify where the pointers in the structure are located
	RtlCopyMemory(dataCopy->Dest, dataCopy->Source, dataCopy->SourceLength);


Cleanup:
	return ntStatus;
}

NTSTATUS DecAddress(PDEVICE_OBJECT DeviceObject, PIRP Irp, PDECADDRESS data)
{
	NTSTATUS ntStatus = STATUS_SUCCESS;

	UNREFERENCED_PARAMETER(DeviceObject);
	UNREFERENCED_PARAMETER(Irp);

	try
	{
		//Verify that the structure being read is in usermode
		ProbeForRead(data, sizeof(DECADDRESS), sizeof(UCHAR));
	}
	except(EXCEPTION_EXECUTE_HANDLER)
	{

		ntStatus = GetExceptionCode();
		goto Cleanup;
	}

	if (data->Dec == TRUE)
	{
		(*(data->Value))--;
	}

Cleanup:
	return ntStatus;
}

NTSTATUS OverflowPool(PDEVICE_OBJECT DeviceObject, PIRP Irp, POVERFLOW_PAGEDPOOL Buf)
{
	UNREFERENCED_PARAMETER(DeviceObject);
	UNREFERENCED_PARAMETER(Irp);
	NTSTATUS ntStatus = STATUS_SUCCESS;

	PVOID mem = ExAllocatePoolWithTag(Buf->PoolType, Buf->AllocationSize, EXPLOITPOOLTAG);
	if (!mem)
	{
		ntStatus = STATUS_NO_MEMORY;
		goto Error;
	}
	
	RtlCopyMemory(mem, Buf->UserData.Buffer, Buf->UserData.Length * sizeof(WCHAR));

Cleanup:
	return ntStatus;

Error:
	if (mem != NULL)
	{
		ExFreePoolWithTag(mem, EXPLOITPOOLTAG);
		mem = NULL;
	}

	goto Cleanup;
}

NTSTATUS Leak(PDEVICE_OBJECT DeviceObject, PIRP Irp, PVOID inBuf, ULONG inBufSize, PVOID outBuff, ULONG outBuffSize)
{
	UNREFERENCED_PARAMETER(DeviceObject);
	UNREFERENCED_PARAMETER(Irp);

	NTSTATUS ntStatus = 0;

	if (inBufSize > outBuffSize)
	{
		ntStatus = STATUS_NO_MEMORY;
		goto Cleanup;
	}

	RtlCopyMemory(outBuff, inBuf, inBufSize);

Cleanup:
	return ntStatus;
}